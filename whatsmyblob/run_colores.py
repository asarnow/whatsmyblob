import os
import glob
import shutil
import subprocess


def colores(cwd, i=0, res=8):
    crdir = os.mkdir(os.path.join(cwd, "colores_%d" % i)
    try:
        stdout = subprocess.run(["colores", query_file, hit_file,
                             "-explor", "1", "-res", "%0.2f" % res],
                             cwd=crdir, stdout=subprocess.PIPE)
        with open(os.path.join(cwd, "colores_%d.log" % i)) as f:
            f.writelines(stdout)
        fit_pdb os.path.join(cwd, os.basename(hit_file) + "_fit.pdb")
        best_pdb = os.path.join(crdir, "col_best_001.pdb")
        os.rename(best_pdb, fit_pdb)
        shutil.rmtree(crdir)
        with open(fit_pdb, "r") as f:
            for l in f:
                tok = l.strip().split()
                if len(tok) ==  5 and tok[0] == "REMARK" and l[1] == "Unnormalized":
                    cc_score = float(l[-1])
    except IOException as e:
        print(e)
    return cc_score




def run_colores(query_file, hits, cath_db, cwd):
    """ Run SITUS colores function on hits, renames output 
        fited PDB file and returns score """

    result = []
    for hit in hits:    
        hit_file, hit_nn_score = hit
        hit_file = os.path.join(cath_db, hit_file)

        try:
            # Run the script and rename the fit PDB output
            subprocess.run(["colores", query_file, hit_file, 
                            "-explor", "1", "-res", "8"], cwd=cwd)

            fit_pdb = os.path.join(cwd, os.path.basename(hit_file) + "_fit.pdb")
            best_pdb = os.path.join(cwd, "col_best_001.pdb")
            print(best_pdb, fit_pdb)
            os.rename(best_pdb, fit_pdb)

            # Remove extraneous files generated by colores
            for junk_file in glob.glob(os.path.join(cwd, "col_*")):
                os.remove(junk_file)
                
        except:
            print("Error")
            #print(f"Error: Colores failed to dock {hit_file} into {query_file}")
  
        try:
            # Parse the fit PDB and extract the score
            with open(fit_pdb, "r") as handle:
                for line in handle.readlines():
                    l = line.strip().split()
                    if len(l)==5:
                        if l[0]=="REMARK" and l[1]=="Unnormalized":
                            cc_score = float(l[-1])
 
            result.append({'CATH_domain': os.path.basename(hit_file),
                            'neighbor_score': hit_nn_score,
                            'corr_coef': cc_score})

        except:
            print("Couldn't extract CC score...")
       
    return result


if __name__=="__main__":
    query_file = "1ubq.mrc"
    hits = [('1ubq',.1), ('1ndd',2)]
    #cath_db = "/mnt/atlas-data/eugene/dompdb/"
    cath_db = "./"

    run_colores(query_file, hits, cath_db)
